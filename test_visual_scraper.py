#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste visual do scraper - vers√£o sem headless para visualizar o funcionamento
"""

import sys
import os
import time
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import subprocess
import random

def cleanup_chrome_processes():
    """Limpa processos √≥rf√£os do Chrome e chromedriver"""
    try:
        subprocess.run(['taskkill', '/f', '/im', 'chrome.exe'], 
                      capture_output=True, text=True, check=False)
        subprocess.run(['taskkill', '/f', '/im', 'chromedriver.exe'], 
                      capture_output=True, text=True, check=False)
        time.sleep(2)
    except Exception as e:
        print(f"Erro ao limpar processos: {e}")

def setup_visual_driver():
    """Configura driver Chrome VISUAL (sem headless) para teste"""
    cleanup_chrome_processes()
    
    options = Options()
    
    # Configura√ß√µes anti-detec√ß√£o
    options.add_argument('--disable-blink-features=AutomationControlled')
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    
    # User agent
    options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
    
    # Configura√ß√µes de performance e seguran√ßa
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-web-security')
    options.add_argument('--disable-features=VizDisplayCompositor')
    options.add_argument('--disable-extensions')
    options.add_argument('--disable-plugins')
    
    # Configura√ß√µes de janela
    options.add_argument('--window-size=1920,1080')
    options.add_argument('--start-maximized')
    
    # Porta de depura√ß√£o aleat√≥ria
    debug_port = random.randint(9000, 9999)
    options.add_argument(f'--remote-debugging-port={debug_port}')
    
    # N√ÉO adicionar --headless para ver o navegador
    print("üåê Iniciando Chrome em modo VISUAL (voc√™ ver√° o navegador)...")
    
    try:
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        
        # Configura√ß√µes de timeout
        driver.set_page_load_timeout(30)
        driver.implicitly_wait(10)
        
        # Remove propriedade webdriver para evitar detec√ß√£o
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        print("‚úÖ Driver Chrome configurado com sucesso!")
        return driver
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar driver: {e}")
        cleanup_chrome_processes()
        raise

def test_visual_scraping():
    """Testa o scraping de forma visual"""
    driver = None
    
    try:
        print("üöÄ Iniciando teste visual do scraper...")
        driver = setup_visual_driver()
        
        # Teste 1: Google
        print("\nüìç Teste 1: Acessando Google...")
        driver.get('https://www.google.com')
        time.sleep(3)
        print(f"‚úÖ Google carregado: {driver.title}")
        
        # Teste 2: Catho p√°gina principal
        print("\nüìç Teste 2: Acessando Catho...")
        driver.get('https://www.catho.com.br')
        time.sleep(5)
        print(f"‚úÖ Catho carregado: {driver.title}")
        
        # Teste 3: P√°gina de vagas espec√≠fica
        print("\nüìç Teste 3: Acessando p√°gina de vagas Industrial...")
        catho_url = 'https://www.catho.com.br/vagas/industrial/'
        driver.get(catho_url)
        time.sleep(5)
        print(f"‚úÖ P√°gina de vagas carregada: {driver.title}")
        
        # Teste 4: Procurar por elementos de vagas
        print("\nüìç Teste 4: Procurando elementos de vagas...")
        try:
            # Aguardar elementos de vagas carregarem
            wait = WebDriverWait(driver, 15)
            
            # Tentar diferentes seletores para vagas
            selectors = [
                "[data-testid='job-card']",
                ".sc-bdvvtL",
                "article",
                ".job-card",
                "[data-cy='job-card']"
            ]
            
            vagas_encontradas = 0
            for selector in selectors:
                try:
                    elements = driver.find_elements(By.CSS_SELECTOR, selector)
                    if elements:
                        vagas_encontradas = len(elements)
                        print(f"‚úÖ Encontradas {vagas_encontradas} vagas com seletor: {selector}")
                        break
                except:
                    continue
            
            if vagas_encontradas == 0:
                print("‚ö†Ô∏è Nenhuma vaga encontrada com os seletores testados")
                print("üìÑ HTML da p√°gina:")
                print(driver.page_source[:1000] + "...")
            
        except Exception as e:
            print(f"‚ùå Erro ao procurar vagas: {e}")
        
        print("\n‚è≥ Aguardando 10 segundos para voc√™ visualizar...")
        time.sleep(10)
        
        print("\n‚úÖ Teste visual conclu√≠do com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro durante teste visual: {e}")
        
    finally:
        if driver:
            print("\nüîÑ Fechando navegador...")
            try:
                driver.quit()
            except:
                pass
            cleanup_chrome_processes()

if __name__ == "__main__":
    test_visual_scraping()
"""
Teste visual do scraper com navegador vis√≠vel
"""

import sys
import os
import time
import random
import subprocess
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def cleanup_chrome_processes():
    """Limpa processos √≥rf√£os do Chrome"""
    try:
        subprocess.run(["taskkill", "/f", "/im", "chrome.exe"], 
                      capture_output=True, text=True, check=False)
        subprocess.run(["taskkill", "/f", "/im", "chromedriver.exe"], 
                      capture_output=True, text=True, check=False)
        time.sleep(2)
    except Exception as e:
        print(f"Erro ao limpar processos: {e}")

def setup_visual_driver():
    """Configura driver Chrome VIS√çVEL para teste"""
    print("üßπ Limpando processos √≥rf√£os do Chrome...")
    cleanup_chrome_processes()
    
    print("‚öôÔ∏è Configurando Chrome vis√≠vel...")
    
    chrome_options = Options()
    
    # REMOVEMOS --headless para tornar o navegador VIS√çVEL
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    # User agent mais realista
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
    
    # Tamanho da janela
    chrome_options.add_argument("--window-size=1200,800")
    
    # Porta de debug aleat√≥ria
    debug_port = random.randint(9000, 9999)
    chrome_options.add_argument(f"--remote-debugging-port={debug_port}")
    
    try:
        print("üì¶ Instalando ChromeDriver...")
        service = Service(ChromeDriverManager().install())
        
        print("üöÄ Iniciando Chrome vis√≠vel...")
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        # Remove propriedade webdriver para evitar detec√ß√£o
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        # Timeouts
        driver.set_page_load_timeout(30)
        driver.implicitly_wait(10)
        
        print("‚úÖ Chrome iniciado com sucesso!")
        return driver
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar driver: {e}")
        cleanup_chrome_processes()
        return None

def test_catho_visual():
    """Testa acesso visual ao Catho"""
    driver = None
    
    try:
        driver = setup_visual_driver()
        if not driver:
            return False
            
        print("\nüåê Testando Google...")
        driver.get("https://www.google.com")
        time.sleep(3)
        print(f"‚úÖ Google carregado: {driver.title}")
        
        print("\nüîç Testando Catho...")
        driver.get("https://www.catho.com.br")
        time.sleep(5)
        print(f"‚úÖ Catho carregado: {driver.title}")
        
        # Tenta encontrar elementos da p√°gina
        try:
            # Procura por links de vagas
            wait = WebDriverWait(driver, 10)
            
            # Diferentes seletores para encontrar vagas
            selectors = [
                "a[href*='/vagas/']",
                "a[href*='/vaga/']",
                ".job-item",
                ".vaga",
                "[data-testid*='job']"
            ]
            
            found_elements = False
            for selector in selectors:
                try:
                    elements = driver.find_elements(By.CSS_SELECTOR, selector)
                    if elements:
                        print(f"‚úÖ Encontrados {len(elements)} elementos com seletor: {selector}")
                        found_elements = True
                        break
                except:
                    continue
            
            if not found_elements:
                print("‚ö†Ô∏è Nenhum elemento de vaga encontrado")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao procurar elementos: {e}")
        
        print("\n‚è±Ô∏è Aguardando 10 segundos para voc√™ ver o navegador...")
        time.sleep(10)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False
        
    finally:
        if driver:
            print("\nüîí Fechando navegador...")
            try:
                driver.quit()
            except:
                pass
            cleanup_chrome_processes()

if __name__ == "__main__":
    print("üß™ TESTE VISUAL DO SCRAPER")
    print("=" * 40)
    print("Este teste abrir√° o Chrome VIS√çVEL para voc√™ ver o que est√° acontecendo.")
    print("O navegador ficar√° aberto por 10 segundos ap√≥s carregar o Catho.")
    print("=" * 40)
    
    success = test_catho_visual()
    
    if success:
        print("\n‚úÖ Teste conclu√≠do com sucesso!")
        print("Se voc√™ viu o navegador abrir e carregar as p√°ginas, o WebDriver est√° funcionando.")
    else:
        print("\n‚ùå Teste falhou!")
        print("Verifique os erros acima para diagnosticar o problema.")